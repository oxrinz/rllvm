pub const analysis = @import("llvm/analysis.zig");
pub const blake3 = @import("llvm/blake3.zig");
pub const bitreader = @import("llvm/bitreader.zig");
pub const bitwriter = @import("llvm/bitwriter.zig");
pub const core = @import("llvm/core.zig");
pub const debug = @import("llvm/debuginfo.zig");
pub const disasm = @import("llvm/disassembler.zig");
pub const engine = @import("llvm/executionEngine.zig");
pub const errors = @import("llvm/errors.zig");
pub const error_handling = @import("llvm/error_handling.zig");
pub const initialization = @import("llvm/initialization.zig");
pub const irreader = @import("llvm/irreader.zig");
pub const linker = @import("llvm/linker.zig");
pub const lto = @import("llvm/lto.zig");
pub const jit = @import("llvm/lljit.zig");
pub const orc = @import("llvm/orc.zig");
pub const orcee = @import("llvm/orcee.zig");
pub const remarks = @import("llvm/remarks.zig");
pub const support = @import("llvm/support.zig");
pub const target = @import("llvm/target.zig");
pub const target_machine = @import("llvm/target_machine.zig");
pub const transform = @import("llvm/transform.zig");
pub const types = @import("llvm/types.zig");

test "all LLVM modules" {
    _ = analysis;
    _ = blake3;
    _ = bitreader;
    _ = bitwriter;
    _ = core;
    _ = debug;
    _ = disasm;
    _ = engine;
    _ = errors;
    _ = error_handling;
    _ = initialization;
    _ = irreader;
    _ = linker;
    _ = lto;
    _ = jit;
    _ = orc;
    _ = orcee;
    _ = remarks;
    _ = support;
    _ = target;
    _ = target_machine;
    _ = transform;
}
